---
# GNU General Public License v3.0+ (see LICENSES/GPL-3.0-or-later.txt or https://www.gnu.org/licenses/gpl-3.0.txt)
# SPDX-License-Identifier: GPL-3.0-or-later
# SPDX-FileCopyrightText: 2020, Felix Fontein

name: CI
'on':
  # Run CI against all pushes (direct commits, also merged PRs) to main, and all Pull Requests
  push:
    branches:
      - main
  pull_request:
  # Run CI once per day (at 06:00 UTC)
  schedule:
    - cron: '0 6 * * *'

jobs:
  sanity:
    name: Sanity (Ⓐ${{ matrix.ansible }})
    strategy:
      matrix:
        ansible:
          # It's important that Sanity is tested against all stable-X.Y branches
          # Testing against `devel` may fail as new tests are added.
          - stable-2.9
          - stable-2.10
          - stable-2.11
          - stable-2.12
          - stable-2.13
          - stable-2.14
          - devel
    runs-on: ubuntu-latest
    steps:

      # ansible-test requires the collection to be in a directory in the form
      # .../ansible_collections/felixfontein/acme/

      - name: Check out code
        uses: actions/checkout@v3
        with:
          path: ansible_collections/felixfontein/acme

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          # it is just required to run that once as "ansible-test sanity" in the docker image
          # will run on all python versions it supports.
          python-version: '3.10'

      # Install the head of the given branch (devel, stable-2.10)
      - name: Install ansible-core (${{ matrix.ansible }})
        run: pip install https://github.com/ansible/ansible/archive/${{ matrix.ansible }}.tar.gz --disable-pip-version-check

      # run ansible-test sanity inside of Docker.
      # The docker container has all the pinned dependencies that are required
      # and all python versions ansible supports.
      - name: Run sanity tests
        run: ansible-test sanity --docker -v --color
        working-directory: ./ansible_collections/felixfontein/acme

  integration:
    runs-on: ubuntu-latest
    name: I (Ⓐ${{ matrix.ansible }}+py${{ matrix.python }})
    strategy:
      fail-fast: false
      matrix:
        ansible:
          - devel
        python:
          - 2.7
          - 3.5
          - 3.6
          - 3.7
          - 3.8
          - 3.9
          - '3.10'
          - '3.11'
        include:
          # 2.9
          - ansible: stable-2.9
            python: 3.5
          # 2.10
          - ansible: stable-2.10
            python: 2.7
          # 2.11
          - ansible: stable-2.11
            python: 2.6
          - ansible: stable-2.11
            python: 3.8
          # 2.12
          - ansible: stable-2.12
            python: 3.7
          # 2.13
          - ansible: stable-2.13
            python: '3.10'
          # 2.14
          - ansible: stable-2.14
            python: 2.7
          - ansible: stable-2.14
            python: '3.11'

    steps:
      - name: Check out code
        uses: actions/checkout@v3
        with:
          path: ansible_collections/felixfontein/acme

      - name: Set up Python ${{ matrix.ansible }}
        uses: actions/setup-python@v3
        with:
          # it is just required to run that once as "ansible-test integration" in the docker image
          # will run on all python versions it supports.
          python-version: '3.10'

      - name: Install ansible-core (${{ matrix.ansible }})
        run: pip install https://github.com/ansible/ansible/archive/${{ matrix.ansible }}.tar.gz --disable-pip-version-check

      # Install dependencies
      - name: Install collection dependencies needed for tests (ansible-core >= 2.10)
        run: |
          git clone --depth=1 --single-branch https://github.com/ansible-collections/community.crypto.git ./ansible_collections/community/crypto
          git clone --depth=1 --single-branch https://github.com/ansible-collections/community.dns.git ./ansible_collections/community/dns
          git clone --depth=1 --single-branch https://github.com/ansible-collections/community.general.git ./ansible_collections/community/general
          git clone --depth=1 --single-branch https://github.com/ansible-collections/community.sops.git ./ansible_collections/community/sops
          git clone --depth=1 --single-branch https://github.com/ansible-collections/community.internal_test_tools.git ./ansible_collections/community/internal_test_tools
        # NOTE: we're installing with git to work around Galaxy being a huge PITA (https://github.com/ansible/galaxy/issues/2429)
        # run: |
        #   ansible-galaxy collection install community.crypto community.dns community.general community.sops community.internal_test_tools -p .
        if: ${{ matrix.ansible != 'stable-2.9' }}

      - name: Install collection dependencies needed for tests (Ansible 2.9)
        run: |
          git clone --depth=1 --single-branch https://github.com/ansible-collections/community.crypto.git ./ansible_collections/community/crypto
          git clone --depth=1 --single-branch https://github.com/ansible-collections/community.dns.git ./ansible_collections/community/dns
          git clone --depth=1 --single-branch --branch stable-4 https://github.com/ansible-collections/community.general.git ./ansible_collections/community/general
          git clone --depth=1 --single-branch https://github.com/ansible-collections/community.sops.git ./ansible_collections/community/sops
          git clone --depth=1 --single-branch https://github.com/ansible-collections/community.internal_test_tools.git ./ansible_collections/community/internal_test_tools
        # NOTE: we're installing with git to work around Galaxy being a huge PITA (https://github.com/ansible/galaxy/issues/2429)
        # run: |
        #   ansible-galaxy collection install community.crypto community.dns 'community.general:<5.0.0' community.sops community.internal_test_tools -p .
        if: ${{ matrix.ansible == 'stable-2.9' }}

      # Run the integration tests
      - name: Run integration test
        run: ansible-test integration -v --color --retry-on-error --continue-on-error --diff --python ${{ matrix.python }} --docker
        working-directory: ./ansible_collections/felixfontein/acme

  ansible-lint:
    name: ansible-lint
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3
        with:
          path: ansible_collections/felixfontein/acme

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.10'

      - name: Install ansible-core and ansible-lint
        run: |
          pip install ansible-core --disable-pip-version-check
          pip install git+https://github.com/ansible-community/ansible-lint.git#egg=ansible-lint --disable-pip-version-check

      # Install dependencies
      - name: Install all collection dependencies
        run: |
          git clone --depth=1 --single-branch https://github.com/ansible-collections/amazon.aws.git ./ansible_collections/amazon/aws
          git clone --depth=1 --single-branch https://github.com/ansible-collections/community.aws.git ./ansible_collections/community/aws
          git clone --depth=1 --single-branch https://github.com/ansible-collections/community.crypto.git ./ansible_collections/community/crypto
          git clone --depth=1 --single-branch https://github.com/ansible-collections/community.dns.git ./ansible_collections/community/dns
          git clone --depth=1 --single-branch https://github.com/ansible-collections/community.general.git ./ansible_collections/community/general
          git clone --depth=1 --single-branch https://github.com/ansible-collections/community.sops.git ./ansible_collections/community/sops
          git clone --depth=1 --single-branch https://github.com/ansible-collections/community.internal_test_tools.git ./ansible_collections/community/internal_test_tools
        # NOTE: we're installing with git to work around Galaxy being a huge PITA (https://github.com/ansible/galaxy/issues/2429)
        # run: |
        #   ansible-galaxy collection install community.aws community.crypto community.dns community.general community.sops -p .

      - name: Run ansible-lint
        run: ansible-lint --offline
        env:
          ANSIBLE_COLLECTIONS_PATHS: ../../../
        working-directory: ./ansible_collections/felixfontein/acme

  yamllint:
    name: yamllint
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.10'

      - name: Install yamllint
        run: |
          pip install yamllint --disable-pip-version-check

      - name: Run yamllint
        run: yamllint .
