---
name: CI
'on':
  # Run CI against all pushes (direct commits, also merged PRs) to main, and all Pull Requests
  push:
    branches:
      - main
  pull_request:
  # Run CI once per day (at 06:00 UTC)
  schedule:
    - cron: '0 6 * * *'

jobs:
  sanity:
    name: Sanity (Ⓐ${{ matrix.ansible }})
    strategy:
      matrix:
        ansible:
          # It's important that Sanity is tested against all stable-X.Y branches
          # Testing against `devel` may fail as new tests are added.
          - stable-2.9
          - stable-2.10
          - devel
    runs-on: ubuntu-latest
    steps:

      # ansible-test requires the collection to be in a directory in the form
      # .../ansible_collections/felixfontein/acme/

      - name: Check out code
        uses: actions/checkout@v2
        with:
          path: ansible_collections/felixfontein/acme

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          # it is just required to run that once as "ansible-test sanity" in the docker image
          # will run on all python versions it supports.
          python-version: 3.8

      # Install the head of the given branch (devel, stable-2.10)
      - name: Install ansible-base (${{ matrix.ansible }})
        run: pip install https://github.com/ansible/ansible/archive/${{ matrix.ansible }}.tar.gz --disable-pip-version-check

      # run ansible-test sanity inside of Docker.
      # The docker container has all the pinned dependencies that are required
      # and all python versions ansible supports.
      - name: Run sanity tests
        run: ansible-test sanity --docker -v --color
        working-directory: ./ansible_collections/felixfontein/acme

  integration:
    runs-on: ubuntu-latest
    name: I (Ⓐ${{ matrix.ansible }}+py${{ matrix.python }})
    strategy:
      fail-fast: false
      matrix:
        ansible:
          - stable-2.9
          - stable-2.10
          - devel
        python:
          - 2.6
          - 2.7
          - 3.5
          - 3.6
          - 3.7
          - 3.8
          - 3.9
        exclude:
          - ansible: stable-2.9
            python: 3.9

    steps:
      - name: Check out code
        uses: actions/checkout@v2
        with:
          path: ansible_collections/felixfontein/acme

      - name: Set up Python ${{ matrix.ansible }}
        uses: actions/setup-python@v2
        with:
          # it is just required to run that once as "ansible-test integration" in the docker image
          # will run on all python versions it supports.
          python-version: 3.8

      - name: Install ansible-base (${{ matrix.ansible }})
        run: pip install https://github.com/ansible/ansible/archive/${{ matrix.ansible }}.tar.gz --disable-pip-version-check

      # Install dependencies
      - name: Install collection dependencies needed for tests
        run: |
          git clone --depth=1 --single-branch https://github.com/ansible-collections/community.crypto.git ./ansible_collections/community/crypto
          git clone --depth=1 --single-branch https://github.com/ansible-collections/community.sops.git ./ansible_collections/community/sops
          git clone --depth=1 --single-branch https://github.com/felixfontein/ansible-tools.git ./ansible_collections/felixfontein/tools
        # NOTE: we're installing with git to work around Galaxy being a huge PITA (https://github.com/ansible/galaxy/issues/2429)
        # run: |
        #   ansible-galaxy collection install community.crypto community.sops felixfontein.tools -p .

      # Run the integration tests
      - name: Run integration test
        run: ansible-test integration -v --color --retry-on-error --continue-on-error --diff --python ${{ matrix.python }} --docker
        working-directory: ./ansible_collections/felixfontein/acme

  ansible-lint:
    name: ansible-lint
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2
        with:
          path: ansible_collections/felixfontein/acme

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Install ansible-base and ansible-lint
        run: |
          pip install https://github.com/ansible/ansible/archive/stable-2.10.tar.gz --disable-pip-version-check
          pip install git+https://github.com/ansible-community/ansible-lint.git#egg=ansible-lint --disable-pip-version-check

      # Install dependencies
      - name: Install all collection dependencies
        run: |
          git clone --depth=1 --single-branch https://github.com/ansible-collections/community.crypto.git ./ansible_collections/community/crypto
          git clone --depth=1 --single-branch https://github.com/ansible-collections/amazon.aws.git ./ansible_collections/amazon/aws
          git clone --depth=1 --single-branch https://github.com/ansible-collections/community.aws.git ./ansible_collections/community/aws
          git clone --depth=1 --single-branch https://github.com/ansible-collections/community.sops.git ./ansible_collections/community/sops
          git clone --depth=1 --single-branch https://github.com/felixfontein/ansible-hosttech_dns.git ./ansible_collections/felixfontein/hosttech_dns
          git clone --depth=1 --single-branch https://github.com/felixfontein/ansible-tools.git ./ansible_collections/felixfontein/tools
        # NOTE: we're installing with git to work around Galaxy being a huge PITA (https://github.com/ansible/galaxy/issues/2429)
        # run: |
        #   ansible-galaxy collection install community.crypto community.aws community.sops felixfontein.hosttech_dns felixfontein.tools -p .

      - name: Run ansible-lint
        run: ansible-lint
        env:
          ANSIBLE_COLLECTIONS_PATHS: ../../../
        working-directory: ./ansible_collections/felixfontein/acme

  yamllint:
    name: yamllint
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Install yamllint
        run: |
          pip install yamllint --disable-pip-version-check

      - name: Run yamllint
        run: yamllint .
